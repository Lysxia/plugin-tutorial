DECLARE PLUGIN "tuto2_plugin"

{

(*
 * In this exercise, we will extend our Coq plugin from before!
 * Last time, we wrote a plugin that manipulates terms from Coq
 * and then defines new terms. This time, we'll use that same idea
 * to implement a form of proof repair!
 *
 * As always, this will be discussion-based, with the usual format.
 *)
open Stdarg
open Termutils
open Exercise
open Stateutils

}

(*** TODO ***)

(*
 * TODO explain, break down into smaller problems
 *
 * TODO exercise
 *)
VERNAC COMMAND EXTEND DisplayMap CLASSIFIED AS SIDEFF
| [ "Display" "Map" constr(e) ] ->
   {
     let sigma, env = global_env () in
     let sigma, map = internalize env e sigma in
     let sigma, swap_map = get_swap_map env map sigma in
     Feedback.msg_notice
       (Pp.seq
          [Pp.str "This function maps: ";
           Pp.prlist_with_sep
             (fun _ -> Pp.str ", ")
             (fun (c_o, c_n) ->
               Pp.prlist_with_sep
                 (fun _ -> Pp.str " <-> ")
                 (fun t -> print env t sigma)
                 [c_o; c_n])
             swap_map])
   }
END

(* TODO explain, break down into smaller problems, handle constants 
   TODO exercise
   TODO debugging info  
   TODO note about when this will break (like when large elim not defined) *)
VERNAC COMMAND EXTEND DefineMap CLASSIFIED AS SIDEFF
| [ "Define" "Map" ident(i) ":=" constr(e) ] ->
   {
     let sigma, env = global_env () in
     let sigma, map = internalize env e sigma in
     let sigma, ip_map = get_swapped_induction_principles env map sigma in
     List.iter2
       (fun (_, ip) suffix ->
         let prefix = Names.Id.to_string i in
         let id = Names.Id.of_string (String.concat "_" [prefix; suffix]) in
         define id ip sigma)
       ip_map
       ["ind"; "rec"; "rect"] 
   }
END

(*** TODO ***)

(*
 * TODO explain, break down into smaller problems
 *
 * TODO exercise
 * TODO something weird with induction principles, whatever
 * TODO for constants, make a variant that calls swap
 *)
VERNAC COMMAND EXTEND Swap CLASSIFIED AS SIDEFF
| [ "Swapped" ident(i) ":=" constr(f) constr(e) ] ->
   {
     let sigma, env = global_env () in
     let sigma, map = internalize env f sigma in
     let sigma, trm = internalize env e sigma in
     let sigma, typ_map = inductives_from_map env map sigma in
     let sigma, swap_map = get_swap_map env map sigma in
     let sigma, ip_map = get_swapped_induction_principles env map sigma in
     let sigma, swapped =
       fold_left_state
         (fun subbed (src, dst) sigma ->
           let sigma, subbed = sub env (src, dst) subbed sigma in
           sigma, reduce_term env subbed sigma)
         (unwrap_definition env trm sigma)
         (List.append (typ_map :: swap_map) (List.rev ip_map))
         sigma
     in Termutils.define i swapped sigma
   }
END

(*** DISCUSSION ***)

(*
 * Same format as usual---please post in the forum as a group!
 * And you need to answer _just one_ of these questions to get credit
 * (though you can answer both if you are feeling adventurous).
 *
 * TODO
 *)

(*** BONUS ***)

(*
 * TODO
 *
 * Error checking
 *
 * Proof production (section & retraction)
 *
 * IDK what else
 *)
