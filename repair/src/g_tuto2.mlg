DECLARE PLUGIN "tuto2_plugin"

{

(*
 * In this exercise, we will extend our Coq plugin from before!
 * Last time, we wrote a plugin that manipulates terms from Coq
 * and then defines new terms. This time, we'll use that same idea
 * to implement a form of proof repair!
 *
 * As always, this will be discussion-based, with the usual format.
 *)
open Pp
open Stdarg
open Termutils
open Exercise

}

(*** TODO ***)

(*
 * TODO explain, break down into smaller problems
 *
 * TODO exercise
 *)
VERNAC COMMAND EXTEND SaveMap CLASSIFIED AS SIDEFF
| [ "Map" constr(o) constr(n) ":=" constr(e) ] ->
   {
     let sigma, env = global_env () in
     let sigma, old_ind = internalize env o sigma in
     let sigma, new_ind = internalize env n sigma in
     let sigma, map = internalize env e sigma in
     (* TODO: invert map, save both directions to a table *)
     ()
   }
END

(*** TODO ***)

(*
 * TODO explain, break down into smaller problems
 *
 * TODO exercise
 *)
VERNAC COMMAND EXTEND SaveMap CLASSIFIED AS SIDEFF
| [ "Configure" "Swap" constr(o) constr(n) ] ->
   {
     let sigma, env = global_env () in
     let sigma, old_ind = internalize env o sigma in
     let sigma, new_ind = internalize env n sigma in
     (*
      * TODO: retrieve map, define old and new constructors,
      * define old and new eliminators, save configuration
      *)
     ()
   }
END

(*** TODO ***)

(*
 * TODO explain, break down into smaller problems
 *
 * TODO exercise
 *)
VERNAC COMMAND EXTEND SwapCases CLASSIFIED AS SIDEFF
| [ "Swap" constr(o) constr(n) "in" constr(e) "as" ident(i) ] ->
   {
     let sigma, env = global_env () in
     let sigma, old_ind = internalize env o sigma in
     let sigma, new_ind = internalize env n sigma in
     let sigma, trm = internalize env e sigma in
     (*
      * TODO: retrieve configuration, pass to sub-like transformation
      *)
     ()
   }
END


(*** DISCUSSION ***)

(*
 * Same format as usual---please post in the forum as a group!
 * And you need to answer _just one_ of these questions to get credit
 * (though you can answer both if you are feeling adventurous).
 *
 * TODO
 *)

(*** BONUS ***)

(*
 * TODO
 *
 * Error checking
 *
 * IDK what else
 *)
